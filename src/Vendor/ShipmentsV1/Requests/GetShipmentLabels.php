<?php

/**
 * This file is auto-generated by Saloon SDK Generator
 * Generator: SellingPartnerApi\Generator\Generators\RequestGenerator
 * Do not modify it directly.
 */

declare(strict_types=1);

namespace SellingPartnerApi\Vendor\ShipmentsV1\Requests;

use Exception;
use Saloon\Enums\Method;
use Saloon\Http\Response;
use SellingPartnerApi\Request;
use SellingPartnerApi\Vendor\ShipmentsV1\Responses\GetShipmentLabels as GetShipmentLabels1;

/**
 * GetShipmentLabels
 */
class GetShipmentLabels extends Request
{
    protected Method $method = Method::GET;

    /**
     * @param  ?int  $limit  The limit to the number of records returned. Default value is 50 records.
     * @param  ?string  $sortOrder  Sort the list by shipment label creation date in ascending or descending order.
     * @param  ?string  $nextToken  A token that you use to retrieve the next page of results. The response includes `nextToken` when the number of results exceeds the specified `pageSize` value. To get the next page of results, call the operation with this token and include the same arguments as the call that produced the token. To get a complete list, call this operation until `nextToken` is null. Note that this operation can return empty pages.
     * @param  ?\DateTimeInterface  $labelCreatedAfter  Shipment labels created after this time will be included in the result. This field must be in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) datetime format.
     * @param  ?\DateTimeInterface  $labelCreatedBefore  Shipment labels created before this time will be included in the result. This field must be in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) datetime format.
     * @param  ?string  $buyerReferenceNumber  Get Shipment labels by passing buyer reference number.
     * @param  ?string  $vendorShipmentIdentifier  Get Shipment labels by passing vendor shipment identifier.
     * @param  ?string  $sellerWarehouseCode  Get Shipping labels based on vendor warehouse code. This value must be same as the `sellingParty.partyId` in the shipment.
     */
    public function __construct(
        protected ?int $limit = null,
        protected ?string $sortOrder = null,
        protected ?string $nextToken = null,
        protected ?\DateTimeInterface $labelCreatedAfter = null,
        protected ?\DateTimeInterface $labelCreatedBefore = null,
        protected ?string $buyerReferenceNumber = null,
        protected ?string $vendorShipmentIdentifier = null,
        protected ?string $sellerWarehouseCode = null,
    ) {}

    public function resolveEndpoint(): string
    {
        return '/vendor/shipping/v1/transportLabels';
    }

    public function createDtoFromResponse(Response $response): GetShipmentLabels1
    {
        $status = $response->status();
        $responseCls = match ($status) {
            200, 400, 401, 403, 404, 415, 429, 500, 503 => GetShipmentLabels1::class,
            default => throw new Exception("Unhandled response status: {$status}")
        };

        return $responseCls::deserialize($response->json());
    }

    public function defaultQuery(): array
    {
        return array_filter([
            'limit' => $this->limit,
            'sortOrder' => $this->sortOrder,
            'nextToken' => $this->nextToken,
            'labelCreatedAfter' => $this->labelCreatedAfter?->format('Y-m-d\TH:i:s\Z'),
            'labelCreatedBefore' => $this->labelCreatedBefore?->format('Y-m-d\TH:i:s\Z'),
            'buyerReferenceNumber' => $this->buyerReferenceNumber,
            'vendorShipmentIdentifier' => $this->vendorShipmentIdentifier,
            'sellerWarehouseCode' => $this->sellerWarehouseCode,
        ]);
    }
}
